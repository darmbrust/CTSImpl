CTS Reference Implementation Changelog
*****************************
Release 1.2.13	01/23/07    *
*****************************
* CTS Value Set nesting depth level change.
* Updated to handle a slight change in the index format (full registered name is now stored, 
  instead of just the value after the urn:oid:.
* Updated the test data to have a proper urn:oid instead of urn:iso.
* Added the lvg jar file to the distribution.
* Updated some SQL libraries - fixed a bug that was causing a prepared statement leak.
* Added supported for Prefixed LexGrid SQL Tables.
* hacked code to make MAPI work on newer HL7 DB.  Still a bug that needs to be cleaned up.
* Upgraded to Lucene 2.0.
* Fixed a bug in mapi browser - lookupCodeSystem that wasn't allowing you to pass in null
  for one of the parameters.
* Fixed some of the logger calls that were losing the stack trace information.
* Replaced the phonetix encoder with one from apache commons for doubleMetaphone searches.
* Updated (almost) all libraries to current.
* Updates to match up with the rest of our internal LexGrid environment better.
* Removed LVG Norm - replaced with a Stemming Algorithm that is easier to deploy.
* Upgraded the RIM database to version 0215d.  Updated JUnit tests as necessary.
* Merged the "old" and "new" JUnit tests into the master combined JUnit test suite.
  All VAPI tests now run against the sample data in the LexGrid.xml file.
  All MAPI tests run against the provided RIM database(s).
* Now ship a RIM database in Hypersonic format.  Default MAPI configuration uses the Hypersonic
  database, rather than Access.
* Bug fixes to MAPI implementation to support Hypersonic, MySQL, and Access.
* Underlying LexBIG related code has been updated to the 2006 model format.  CTS has been updated
  so that it can read version 2006 or 2005 XML or SQL tables.  By default, content is loaded into 
  2006 table formats now.
* Added close() methods to the MAPI implementation for internal use.

*****************************
Release 1.2.12	04/11/06    *
*****************************
* Updated EMF / SQL / Converter / Indexer libraries.
* Added support for Oracle to the SQL implementation.
* Added support for newest SQL table structure - forward and backward compatible with old structure.
* Changed the license to EPL
* refactored code to edu.mayo.informatics.cts
* Updated to 1.9.1+ of Lucene - updated to match with changes made to the indexer for LexBIG.
* Split off all of the interface code and HL7 spec into its own project.  Vastly simplified the ant 
  build script.
* Merged the remainder of the CTSUtility project into CTS.  Former CTS changelog is appended to the 
  end of this changelog.

*****************************
Release 1.2.11	11/18/05    *
*****************************
* Fixed a case senstive issue when running on DB2 (sql and sqllite), trying to map an id to a name.
* Fixed a array out of bounds exception that could happen if supported code systems are missing.
* Updating the LexGrid converter libraries for the new LexGrid SQL Schema.  The SQL table changes 
   do not affect CTS.

*****************************
Release 1.2.10	10/17/05     *
*****************************
* New Lucene index format - now one index for regular and norm searching (instead of two)

* Lucene searches now support a "sounds like" algorithm for matching - double metaphone, to be
  specific.  
  
* Changed the setup/configuration loading methods - now supports loading properties configuration 
  files from the classpath - and has a cleaner API.
  
* Added new simpler methods for constructing the implementations.
  
* Made the system cache consistant - and size configurable in the properties file.

* Changed the index structure on the SQL tables - changed the variable order of the SQL queries to match
  (helps performance on SQL dbs with poor optimizers)


*****************************
Release 1.2.9	9/29/05     *
*****************************
* Removed all uses of "Select count(*) > 0 as foo" since it is not supported by DB2

* Fixed DB2 support.

* Updated the GenericSQLConverter code for DB2 issues, consistency.

* Fixed a bug in the LDAP VAPI implementation that was causing it to miss certain relationships
  on a lookupCompleteCoded concept call.

* Query updates for SQLLite to fix DB2 issues, and give performance improvements.

* Overhauled the JUnit test system - now the JUnit tests populate the databases with the necessary
  data prior to the test run, and it is completely dynamic WRT which databases it will test against, 
  and what tests it will run

* Removed the MSAccess LexGrid/LexGrid Lite Rim database - replaced with a HypersonicSQL database.

* Removed the mysql/posgres Rim database dumps - replaced with a LexGrid XML file which can be loaded
  into your database of choice.
  
* Updated structure of shipped libraries, removed unnecessary libraries, files, etc.


*****************************
Release 1.2.8	8/31/05     *
*****************************
* More bug fixes and implementation updates on the LuceneSearch tools.

* Finished the JUnit tests for the LuceneSearch tools

* Fixed a null handling bug in lookupDesignations and lookupProperties across all implementations
if they didn't provide a concept code, or a code system.

* Refactored a few bits of some other JUnit tests.

* Cleaned up some comments/todo items.

* Cleaned up some of the JUnit inconsistencies.

* Updated to latest postgres jdbc driver

* Fixed bugs in both SQL implementations that were allowing more specific language queries to succeed 
on queries that they shouldn't.

* Modified a few of the SQL queries to make better use of indexes when specifiying languages in some queries.

* Fixed a bug in the oldSqlTests.

* Fixed a case-sensitivity bug that affected postgres when trying to find a code system name.

* Performance improvements in getting the top level nodes in a code system.

* Changed the way the lucene search tools create a multi searcher when needed.

* Fixed a bug in the Lucene Search queries that wasn't passing the unlimited sizelimit correctly.

* Changed Lucene Analyzers

* Overrode a portion of the Lucene scoring algorithm, to help exact matches be ranked at the top.

* Upgraded to 1.9 alpha build of Lucene.

* Added Hypersonic SQL support (driver, junit tests, and test data)

* Fixed a bug relating to mime types in the sql browser operations lookupConceptCodesByProperty.

*****************************
Release 1.2.7	6/23/05     *
*****************************
* Upgraded to 1.2.1 release of apache axis - this caused some of the public API classes to change a bit.
Most notably, all of the ArrayOf___ classes went away.

* Fixed a bug in sql lookupCompleteCoded concept that caused it to not return the proper error message - 
instead it was just not returning relationships in certain cases.

* Fixed a bug in both sql implememntations where lookupProperties would fail if you passed in an empty (vs 
null) properties array.

* Added code stubs for the CodeMappingOperations service (not yet implemented)

* Fixed yet another boolean handling bug (this one on postgres) - all boolean handling has been consolodated
and moved into the CTSUtility package now.

* Updated CTSUtility code - smarter properties file locating, and other code reorganization.

* Fixed a bug in SQL and SQLLite that was causing it to return the "@" node as a valid relationship (it
shouldn't ever return those)

* Updated the spec wording to correspond to the changes made in release 1.2.6 - see below.

* Changed the default properties file name, changed the default LOG4J config parameter inside of the properties
file.  * OLD PROPERTIES FILES WILL NEED MODIFYING*

* Fixed both vapi sql implementations to properly handle missing or null matchText, and null matchAlgorithms.

* Fixed a minor issue in the ldap vapi runtime in lookupDesignationQuick


*****************************
Release 1.2.6	5/25/05     *
*****************************
* Changed lookupDesignation (in all implementations) so that it does not require a language be 
provided.  Now uses the default language if no language is provided.  This is not in the spec 
(yet) and it mentioned in bug #260.

* Changed the implementation of lookupCodeSystemInfo, such that in the array of languages returned,
the first language is now the "defaultLanguage" for the code system.  This is not in the spec (yet)
and it is mentioned in bug #260.

* fixed a bug in lookupDesignation (all implementations) where it was failing to return the correct
designation if no preferred designation was specified in the data

* Changed the way the sizeLimits were handled in lookupConceptCodesByDesignation and 
lookupConceptCodesByProperty in all implementations - previously, wild card searches were likely 
to return less than the requested limit.

* UTF-8 reads of SQL databases.

* Fixed a bug where it was not dealing with "/" characters correctly in ldap



*****************************
Release 1.2.5	4/26/05     *
*****************************
* Made it handle registered names or shortened registered names properly in vapi sql lite.

* Fixed a bug where searches for presentations that NULL for the language weren't working (sql and sql lite)

* Fixed bugs where it wasn't matching on language subtypes where it should (ldap and sql vapi impl)

* Fixed the problems dealing with mapping codingSchemeNames back to oids in relationships - all sql and 
  ldap implementations.
  
* First working release of new JUnit Tests

* Updated some relationship code to be faster, better take advantage of default indexes.


*****************************
Release 1.2.4	4/13/05     *
*****************************
* Signifigantly improved the performance of reverse hierarchy lookups.

* Fixed some errors in the handling of booleans across different databases in VAPI

* Updated the VAPI sql impl's to not match on lookupDesignation unless isPreferred is TRUE.

* Fixed a bug in the id to name mapping in sqllite

* Fixed (another) boolean related bug with querying boolean columns on the access sql 
database.

* Fixed issues with isActive on a conceptCode in sqlLite

* made sqlLite calls by codingSchemeId match the localname or the registered name

* updated code to make it automatically reconnect failed SQL connections.

* fixed a bug in the objectCaching on SQL - it wasn't using a unique object cache per connection.

* fixed more bugs with sqlLite and booleans

* made SQL and LDAP implementations deal with missing localNames

* made it not fail out on lookupCompleteCodedConcept if there is no native relationship

* fixed some sql connection leaks - also made it release some connections earlier to save connections


*****************************
Release 1.2.3	2/09/05     *
*****************************
* Removed unecessary libraries, added missing external licenses.
* Updated JDom and its dependancies.
* Fixed a bugs in both SQL implmentations dealing with languages - when they passed in null language.
* Added the readme file.



*****************************
Release 1.2.2	1/27/05     *
*****************************

** VAPI Implementations *****************************
Fixed it so that lookupCodeExpansion can be given a null or blank language.  It now uses the default
language in this case.

Moved the test classes to their own package(s), simplified them.

Had to change the VapiExpansionContext format, to add a sourceCodingSchemeId.  Ldap implementations 
needed this.
 
Moved the sql packages to sqlLite - to make room for the new sql implementation - the one that uses the
full model representation of the database instead of the "lite" database.

** VAPI LDAP Implementation *****************************
Fixed the associationQualifier code (this was broken from a recent ldap schema change)

Fixed some mistakes that discovered in the handling of sourceCodingSchemes and targetCodingSchemes in 
code expansions.

** VAPI SQL Implementation *******************************
Added this new implementation that runs against sql (as opposed to sqlLite)

** VAPI SQL Lite Implementation **************************
Fixed some issues dealing with targetCodingScheme in lookupCompleteCodedConcept, and code expansions.

fix for above improved performance of code expansions.

fix for getNameForCodeSystemId where it wasn't populating the object cache.

** MAPI LDAP implementations *******************************
moved the test classes to their own package, simplified them.


*****************************
Release 1.2.1	1/05/05     *
*****************************
** VAPI LDAP Implemntation **

** VAPI SQL Implementation **

*********** MAPI ************

*********** Other ***********
* Upgraded to 1.2RC2 of Apache Axis.  Changed the wsdl generation type from the default to "WRAPPED" 
to allow interoperability of SOAP services with .NET.  This changed what the resulting generated 
code looks like, so all of the implementation code was modified as necessary to work again.  Main 
change was that now instead of returning Arrays of things, there are new classes generated - for 
example - ArrayOf_xsd_String.

* Updated the build file a bit, for the above changes, and to reduce some of the duplicate work that was
done in the generation of CTS withVarNames.

* Updated the jar file of CTSUtility - it had to be updated for changes from above.

* The build file was not putting the wsdl files into the cts spec web directory or zip file.  Fixed now.



**************************
Release 1.2	12/17/04 *
**************************
* VAPI LDAP Implemntation *
* Made fixes as necessary to line up with the new 2.0 LexGrid Model (the new model required some ldap schema 
changes.  Primarily, searches with a filter of objectClass=textualPresentation would no longer work.

* MAPI *
* Made changes sync up with revision 1.2 of the CTS spec.


* Other *
* Added LexGrid Service Index support to all of the constructors
* Moved the Utility stuff to a seperate package/project (now in the CTSUtility.jar file, with source available
as a seperate download)
* Renamed/moved CTS constants to be more senseable
* Changed XML parsing from AdHoc to JDOM throughout
* Fixed the build process on Linux - spec had case sensitivity problems
* Fixed the build file to work on jdk 1.5 - lots of warnings, but it works now.
* Added more power to the ldap dn string escape utility method.
* Started initial work on Lucene indexing of content (not finished yet)
* Fixed the version numbers that the methods return.



**************************
Release 1.1.2	7/03/04  *
**************************
* MAPI *
* We refactored our org.hl7.types into org.hl7.cts.types to avoid conflicts

* VAPI LDAP Browser *
* removed some extra exceptions
* updated to handle the new format of the expansion contexts
* Fixed the broken handling of the activeConceptsOnly flag on lookupConcepts by designation and by property 

* VAPI LDAP Runtime *
* removed some extra exceptions
* made it throw an exception if it hits the recursion limit (instead of doing nothing)

* VAPI SQL *
* Initial release - also includes a populated database in the LexGrid Lite format

* Other *
* Minor changes to build script
* Changed the license
* Change MySQL database paths to relative in the config file, so everything will demo "out of the box" with no 
configuration required.



**************************
Release 1.1.1	4/27/04  *
**************************
* Maintenance release, no specification changes.
* Fixed a bug in subsumes (supposed to return true if the concepts equal each other)
* MAPI - Improved code to use connection pooling
* MAPI - Improved code to gracefully handle and reconnect on the loss of database connections
* MAPI - Consolodated some duplicate SQL calls between Browser and Runtime.
* VAPI - Optimized a few queries to run faster
* VAPI - Added caching of often queries items, to reduce the number of database lookups.
* VAPI - Fixed a bug introduced in the lookupDesignationsQuick method
* VAPI - Fixed a bug that was preventing expanding all concepts from the root node.
* General - Added this change log
* General - Made a couple of minor improvements to the build script
* General - several new external libraries were added to support the changes
* General - modified the location of the class where the sql database parameters are set  - this
caused changes to the props file format.


**************************
Release 1.1              *
**************************
This is the first release which lines up with version 1.1 of the specification

 
 Past (unversioned) changes:
 


April 27, 2004

    * Added a changelog to the download - it contains more technical details of the code changes.

April 5, 2004

    * Released version 1.1 of the reference implementation - this lines up with the latest version of the spec.
    * Updated the Soap Client and the public services to the latest release.

March 11, 2004

    * Posted a new image of the Reference Implementation to the download page.

January 6, 2004

    * Released an upgrade to the implementation that includes many bug fixes.
    * Released the beginnings of JUnit test cases for the code (more coming soon)

December 8, 2003

    * Updated the reference implementation to match up with the latest changes to the spec.  All methods now (can) throw the exception UnexpectedError.
    * The build process was fixed so that the final Java interfaces now have the correct parameter names (coding_scheme instead of in0)
    * The code was updated to work with MySQL in addition to the databases we already support (Postgres, and MSAccess)

November 17, 2003

    * Version 0.999 of the specification has been released
    * The implementation has been updated to be in sync with the specification
    * The build script for the implementation was significantly improved
    * We have updated to the newest version of Apache Axis
    * The implementation has been improved with respect to configuration, logging, and error handling

June 6, 2003

    * An early release of the 0.9 specification has been made available.

May 19, 2003

    * The build process for the implementation was updated to have less external dependencies.
    * The idl files had some minor updates made to them.
    * The reference implementation was updated to match the idl files, and to publish other methods that we have recently implemented.
 
 
 
************************************************************************************************
The CTSUtility project was merged into CTS on 4/11/06.  Here is the CTSUtility changelog from 
before that time:
CTSUtility Changelog

******************************
Release 1.2.12	4/11/06      *
******************************
(skipped release 1.2.11 - keep in sync with CTS)

* Indexer - Added code boundries (almost empty documents that mark where the ordered list of documents changes from 
  one concept code to another [to be used by lexBIG])
  
* Indexer - Added an untokenized, lower-cased, unstored copy of the propertyValue to the index, to allow queries such
  as non-case-sensitive exact match, and non-case-sensitive starts with.
  
* Moved indexer code into the LexGrid Converter project.

* Updated the Properties file locator code.

* Changed the License to EPL.

* Ended this as a seperate project - merged it into CTS.

******************************
Release 1.2.10	10/12/05     *
Release 1.1.0 of GUI Indexer *
******************************
* Change in the index format - Now the Normalized parts of the index are folded into a single index, instead
  of requiring a seperate index.  
* Added the new DoubleMetaphone indexing option.
* Upgraded LVG version
* Reorganized jar files
* Reworked / Refactored the properties file loading / log4j configuration to be easier to use.

******************************
Release 1.2.9	9/29/05      *
Release 1.0.3 of GUI Indexer *
******************************
* Minor indexer updates for DB2
* Removed the Generic SQL Modifier -> Duplicate of ldapSqlConverter code
* Removed code from Utility class that was duplicated in the ldapSqlConverter

******************************
Release 1.2.8	8/31/05      *
Release 1.0.2 of GUI Indexer *
******************************
* Changed to a different tokenizer on the non-normalized indexes.

* Changed to a better gui widget for output.

* Updated to a new version of the indexer code, which fixes issues with character removal (., ,, ), etc)

* New version of lucene.

* Added time stamps to output.

* Added HyperSonic SQL support as required for CTS.

*****************************
Release 1.2.7.1	8/05/05     *
*****************************
* Much work on the Lucene Index Loaders - SQL and LDAP.

* Added the codingSchemeId into the lucene index

* Added postgres drivers

* Fixed setBoolean code for new postgres driver

* Built a GUI for the Lucene Index Loaders.

* Added necessary info to the Lucene Index metadata file.

* Upgraded JDom to 1.0, new version of Indexer to fix minor bug, and changed the MessageDirector into an 
interface.

*****************************
Release 1.2.7	6/23/05     *
*****************************
(skipped release 1.2.6 - keep in sync with CTS version numbers)
* Upgraded to Axis 1.2.1 final - which caused changes in some of the class signatures.

* Made the properties file locater much smarter.

* Implemented a Lucene Index Builder for LexGrid SQL databases.

* Changed the method signatures for the Log4J initializers.

* Added a missing item to the VapiToStrings class.


*****************************
Release 1.2.6	5/24/05     *
*****************************
(skipped release 1.2.5 - keep in sync with CTS version numbers)

* modified the ldap character escape routine, so it doesn't escape things that are already escaped.

*****************************
Release 1.2.4	4/16/05     *
*****************************

(skipped release 1.2.3 - to keep in sync with CTS version #s)

* Had to make the generic sql modifier take in a flag to determine sql lite or 
sql since booleans are handled differently in Access in each of them.

* Added more methods to the XML connection parsing code


*****************************
Release 1.2.2	1/27/05     *
*****************************
Made the prop file locator smarter.

*****************************
Release 1.2.1	1/05/05     *
*****************************
Merged changes from the SOAPClient version of the Constructors class back into this class.
Updated the toString methods.

**************************
Release 1.2	12/17/04 *
**************************
Created this project as a way to split out some of the common code from CTS for easier reuseablility.
Release numbers were set to line up with the CTS project.